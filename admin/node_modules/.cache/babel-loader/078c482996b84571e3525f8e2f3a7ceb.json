{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; //import cartRedux from \"./cartRedux\";\n//const userRedux = createSlice({\n\nconst userListRedux = createSlice({\n  name: \"userList\",\n  initialState: {\n    currentUser: null,\n    //should this be \"[]\"? was \"null\"\n    isFetching: {},\n    //should this be \"false\"? was \"{}\"\n    error: {} //should this be \"false\"? was \"{}\"\n\n  },\n  reducers: {\n    //DELETE USER\n    deleteUserStart: state => {\n      state.isFetching = true;\n    },\n    deleteUserSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n    },\n    deleteUserFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    //ADD USER\n    addUserStart: state => {\n      state.isFetching = true;\n    },\n    addUserSuccess: (state, action) => {\n      state.isFetching = false;\n      state.currentUser = action.payload;\n    },\n    addUserFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    //Update \n    updateUserStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    updateUserSuccess: (state, action) => {\n      state.isFetching = false;\n      state.users[state.users.findIndex(item => item._id === action.payload.id)] = action.payload.User;\n    },\n    updateUserFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    }\n  }\n});\nexport const {\n  deleteUserStart,\n  deleteUserSuccess,\n  deleteUserFailure,\n  addUserStart,\n  addUserSuccess,\n  addUserFailure,\n  updateUserFailure,\n  updateUserSuccess,\n  updateUserStart\n} = userListRedux.actions;\nexport default userListRedux.reducer;","map":{"version":3,"sources":["/Users/ccr2k/Desktop/foleyshop/admin/src/redux/userListRedux.js"],"names":["createSlice","userListRedux","name","initialState","currentUser","isFetching","error","reducers","deleteUserStart","state","deleteUserSuccess","action","payload","deleteUserFailure","addUserStart","addUserSuccess","addUserFailure","updateUserStart","updateUserSuccess","users","findIndex","item","_id","id","User","updateUserFailure","actions","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B,C,CACA;AAEA;;AACC,MAAMC,aAAa,GAAGD,WAAW,CAAC;AACjCE,EAAAA,IAAI,EAAE,UAD2B;AAEjCC,EAAAA,YAAY,EAAC;AACXC,IAAAA,WAAW,EAAG,IADH;AACS;AACpBC,IAAAA,UAAU,EAAE,EAFD;AAEK;AAChBC,IAAAA,KAAK,EAAE,EAHI,CAGD;;AAHC,GAFoB;AAOjCC,EAAAA,QAAQ,EAAE;AACV;AACFC,IAAAA,eAAe,EAAEC,KAAD,IAAS;AACvBA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACD,KAJW;AAKZK,IAAAA,iBAAiB,EAAC,CAACD,KAAD,EAAOE,MAAP,KAAgB;AAChCF,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACL,WAAN,GAAkBO,MAAM,CAACC,OAAzB;AACD,KARW;AASZC,IAAAA,iBAAiB,EAAEJ,KAAD,IAAS;AACzBA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAY,IAAZ;AACD,KAZW;AAaZ;AACAQ,IAAAA,YAAY,EAAEL,KAAD,IAAS;AACpBA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACD,KAhBW;AAiBZU,IAAAA,cAAc,EAAC,CAACN,KAAD,EAAOE,MAAP,KAAgB;AAC7BF,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACL,WAAN,GAAkBO,MAAM,CAACC,OAAzB;AACD,KApBW;AAqBZI,IAAAA,cAAc,EAAEP,KAAD,IAAS;AACtBA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAY,IAAZ;AACD,KAxBW;AAyBZ;AAEAW,IAAAA,eAAe,EAAGR,KAAD,IAAS;AACxBA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAY,KAAZ;AACD,KA9BW;AA+BZY,IAAAA,iBAAiB,EAAE,CAACT,KAAD,EAAOE,MAAP,KAAgB;AACjCF,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACU,KAAN,CACAV,KAAK,CAACU,KAAN,CAAYC,SAAZ,CAAuBC,IAAD,IAAQA,IAAI,CAACC,GAAL,KAAYX,MAAM,CAACC,OAAP,CAAeW,EAAzD,CADA,IACiEZ,MAAM,CAACC,OAAP,CAAeY,IADhF;AAGD,KApCW;AAqCZC,IAAAA,iBAAiB,EAAGhB,KAAD,IAAS;AAC1BA,MAAAA,KAAK,CAACJ,UAAN,GAAiB,KAAjB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAY,IAAZ;AACD;AAxCW;AAPuB,CAAD,CAAjC;AAmDD,OAAO,MAAM;AACXE,EAAAA,eADW;AAEXE,EAAAA,iBAFW;AAGXG,EAAAA,iBAHW;AAIXC,EAAAA,YAJW;AAKXC,EAAAA,cALW;AAMXC,EAAAA,cANW;AAOXS,EAAAA,iBAPW;AAQXP,EAAAA,iBARW;AASXD,EAAAA;AATW,IAURhB,aAAa,CAACyB,OAVZ;AAYP,eAAezB,aAAa,CAAC0B,OAA7B","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n//import cartRedux from \"./cartRedux\";\n\n//const userRedux = createSlice({\n const userListRedux = createSlice({\n  name: \"userList\",\n  initialState:{\n    currentUser : null, //should this be \"[]\"? was \"null\"\n    isFetching: {}, //should this be \"false\"? was \"{}\"\n    error: {} //should this be \"false\"? was \"{}\"\n  },\n  reducers: {\n  //DELETE USER\ndeleteUserStart:(state)=>{\n  state.isFetching=true\n},\ndeleteUserSuccess:(state,action)=>{\n  state.isFetching=false;\n  state.currentUser=action.payload\n},\ndeleteUserFailure:(state)=>{\n  state.isFetching=false;\n  state.error=true;\n},\n//ADD USER\naddUserStart:(state)=>{\n  state.isFetching=true\n},\naddUserSuccess:(state,action)=>{\n  state.isFetching=false;\n  state.currentUser=action.payload\n},\naddUserFailure:(state)=>{\n  state.isFetching=false;\n  state.error=true;\n},\n//Update \n\nupdateUserStart: (state)=>{\n  state.isFetching=true;\n  state.error=false;\n},\nupdateUserSuccess: (state,action)=>{\n  state.isFetching=false;\n  state.users[\n  state.users.findIndex((item)=>item._id ===action.payload.id) ] = action.payload.User\n\n},\nupdateUserFailure: (state)=>{\n  state.isFetching=false;\n  state.error=true;\n}\n  },\n});\n\nexport const { \n  deleteUserStart,\n  deleteUserSuccess,\n  deleteUserFailure,\n  addUserStart,\n  addUserSuccess,\n  addUserFailure,\n  updateUserFailure,\n  updateUserSuccess,\n  updateUserStart\n } = userListRedux.actions\n\nexport default userListRedux.reducer;"]},"metadata":{},"sourceType":"module"}